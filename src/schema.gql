# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  lat: String
  long: String
  pincode: String!
  street: String!
}

input AddressInput {
  lat: String
  long: String
  pincode: String!
  street: String!
}

type Branches {
  name: String!
}

input BranchesInput {
  id: ID!
  name: String!
}

type Channel {
  type: String!
  version: String!
}

type Charges {
  discount_fee: Float!
  joker_fee: Float!
  payment_fee: Float!
  service_fee: Float!
}

"""
The Closings model
"""
type Closing {
  _id: ID!
  active: Boolean!
  closingId: String!
  createdAt: DateTime!
  date: DateTime!
  inHandTotal: Float!
  receivedItems: [ReceivedItems!]!
  sales: [Sale!]!
  shop: Shop
  spentItems: [SpentItems!]!
  spentTotal: Float!
  updatedAt: DateTime!
}

type Commission {
  amount: Float!
  commissionable_value: Float!
  rate: Float!
}

input CreateClosingInput {
  active: Boolean!
  date: DateTime!
  inHandTotal: Float
  receivedItems: [ReceivedItemsInput!]
  salesIds: [ID!]
  shop: ID
  spentItems: [SpentItemsInput!]
  spentTotal: Float
}

input CreateItemsInput {
  category: String
  name: String!
  price: PriceInput
  shop: ID
  stock: Float!
}

input CreatePurchaseInput {
  contact: String
  discount: Float
  email: String
  items: [PurchaseItemInput!]!
  shop: ID
  total: Float!
  vendor: String
}

input CreateSaleInput {
  contact: String
  customer: String
  discount: Float
  email: String
  items: [SaleItemInput!]!
  loss: Float!
  profit: Float!
  shop: ID
  total: Float!
}

input CreateShopInput {
  address: AddressInput!
  branches: [BranchesInput!]
  name: String!
  timezone: String
  type: String!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phone: String!
  shop: ID
}

type Customer {
  channel: Channel!
  customer_id: String!
  payment: Payment!
  profile: Profile!
}

input DateRange {
  from: DateTime!
  to: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Delivery {
  delivery_fee: Float!
  location: Location
  provider: String!
  tax: Tax!
  tip: Float!
}

type Item {
  customer_notes: String!
  id: String!
  name: String!
  options: [Option!]!
  quantity: Float!
}

"""
The Items model
"""
type Items {
  _id: ID!
  category: String
  createdAt: DateTime!
  name: String!
  price: Price
  shop: Shop
  shortId: String!
  stock: Float!
  updatedAt: DateTime!
}

type LabelValueObj {
  label: String!
  value: String!
}

type Location {
  address_text: String!
  building: String!
  city: String!
  description: String!
  district: String!
  id: String!
  label: String!
  latitude: Float!
  longitude: Float!
  postal_code: String!
  street: String!
}

type Mutation {
  createClosing(closing: CreateClosingInput!): Closing
  createItem(item: CreateItemsInput!): Items
  createNewUser(user: CreateUserInput!): ID!
  createPurchase(purchase: CreatePurchaseInput!): Purchase
  createSale(sale: CreateSaleInput!): Sale
  createShop(shop: CreateShopInput!): Shop
  sendResetPasswordEmail(email: String!): Boolean!
  updateClosing(closing: UpdateClosingInput!): Closing
  updateItem(item: UpdateItemsInput!): Items
  updatePurchase(purchase: UpdatePurchaseInput!): Purchase
  updateSale(sale: UpdateSaleInput!): Sale
}

type Option {
  customer_notes: String!
  id: String!
  name: String!
  quantity: Float!
  type: String!
}

type OrderContent {
  brand_name: String!
  business_type: String!
  commission: Commission!
  corporate: Boolean!
  country_code: String!
  currency: String!
  customer: Customer!
  delivery: Delivery!
  global_entity_id: String!
  locale: String!
  order: OrderInfo!
  order_id: String!
  preorder: Boolean!
  promised_customer_timestamp: String!
  test_order: Boolean!
  timestamp: String!
  vendor: VendorInfo!
}

type OrderInfo {
  deposit: Float!
  items: [Item!]!
  minimum_order_value: Float!
  order_value: Float!
  tax: Tax!
}

type Payment {
  coupon: Float!
  discount: Float!
  loyalty_point_balance: Float!
  minimum_order_value_fee: Float!
  paid: Boolean!
  payment_method: String!
  service_fee: Float!
  total_order_value: Float!
  total_tax: Float!
  transaction_number: String!
  wallet_balance: Float!
}

type Price {
  cost: Float!
  list: Float!
  sale: Float!
}

input PriceInput {
  cost: Float!
  list: Float!
  sale: Float!
}

type Profile {
  email: String!
  first_name: String!
  guest: Boolean!
  id: String!
  last_name: String!
  locale: String!
  name: String!
  phone: String!
}

"""
The Purchase model
"""
type Purchase {
  _id: ID!
  active: Boolean!
  billNumber: String!
  closing: Closing
  contact: String
  createdAt: DateTime!
  discount: Float
  email: String
  items: [PurchaseItem!]!
  shop: Shop
  total: Float!
  updatedAt: DateTime!
  vendor: String
}

type PurchaseItem {
  cost: Float!
  item: Items!
  quantity: Float!
  total: Float!
}

input PurchaseItemInput {
  cost: Float!
  item: ID!
  quantity: Float!
  total: Float!
}

type Query {
  getClosingByClosingId(closingId: String!): [Closing!]!
  getClosingForUser(date: DateRange!): [Closing!]!
  getItemsForUser: [Items!]!
  getLastPurchase: Purchase
  getLastSale: Sale
  getPreviousClosing: Closing
  getPurchaseByBillNumber(billNumber: String!): [Purchase!]!
  getPurchaseByVendorName(vendor: String!): [Purchase!]!
  getPurchaseByVendorPhone(contact: String!): [Purchase!]!
  getPurchasesForUser(date: DateRange!): [Purchase!]!
  getPurchaseWithoutClosing: [Purchase!]
  getSaleByBillNumber(billNumber: String!): [Sale!]!
  getSaleByCustomerName(customer: String!): [Sale!]!
  getSaleByCustomerPhone(contact: String!): [Sale!]!
  getSalesForUser(date: DateRange!): [Sale!]!
  getSaleWithoutClosing: [Sale!]
  getShopForUser: Shop
  getShopTypes: [LabelValueObj!]
  getUserById(id: ID!): User
  me: User
}

type ReceivedItems {
  amount: Float!
  receivedFor: String!
}

input ReceivedItemsInput {
  amount: Float!
  receivedFor: String!
}

enum Roles {
  Admin
  Manager
  Sales
}

"""
The Sales model
"""
type Sale {
  _id: ID!
  active: Boolean!
  billNumber: String!
  closing: Closing
  contact: String
  createdAt: DateTime!
  customer: String
  discount: Float
  email: String
  items: [SaleItem!]!
  loss: Float!
  profit: Float!
  shop: Shop
  total: Float!
  updatedAt: DateTime!
}

type SaleItem {
  cost: Float!
  discount: Float!
  item: Items!
  quantity: Float!
  total: Float!
}

input SaleItemInput {
  cost: Float!
  discount: Float!
  item: ID!
  quantity: Float!
  total: Float!
}

"""
The Shop model
"""
type Shop {
  _id: ID!
  address: Address
  branches: [Branches!]
  name: String!
  timezone: String
  type: String!
}

type SpentItems {
  amount: Float!
  spentOn: String!
}

input SpentItemsInput {
  amount: Float!
  spentOn: String!
}

type Tax {
  amount: Float!
  net_amount: Float!
  tax_rate_percent: Float!
}

input UpdateClosingInput {
  _id: ID!
  active: Boolean!
  date: DateTime!
  inHandTotal: Float
  receivedItems: [ReceivedItemsInput!]
  salesIds: [ID!]
  shop: ID
  spentItems: [SpentItemsInput!]
  spentTotal: Float
}

input UpdateItemsInput {
  _id: ID!
  category: String
  name: String!
  price: PriceInput
  stock: Float!
}

input UpdatePurchaseInput {
  _id: ID!
  contact: String
  discount: Float
  email: String
  items: [PurchaseItemInput!]!
  shop: ID
  total: Float!
  vendor: String
}

input UpdateSaleInput {
  _id: ID!
  contact: String
  customer: String
  discount: Float
  email: String
  items: [SaleItemInput!]!
  loss: Float!
  profit: Float!
  shop: ID
  total: Float!
}

"""
The User model
"""
type User {
  _id: ID!
  createdAt: DateTime!
  firstName: String!
  fullName: String!
  lastName: String!
  paid: Boolean!
  phone: String!
  registeredAt: DateTime!
  role: Roles!
  roles: [Roles!]!
  shop: Shop
  updatedAt: DateTime!
}

type VendorInfo {
  charges: Charges
  id: String!
  name: String!
}
