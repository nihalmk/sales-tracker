# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  street: String!
  pincode: String!
  lat: String
  long: String
}

input AddressInput {
  street: String!
  pincode: String!
  lat: String
  long: String
}

type Branches {
  name: String!
}

input BranchesInput {
  id: ID!
  name: String!
}

type Channel {
  type: String!
  version: String!
}

type Charges {
  joker_fee: Float!
  service_fee: Float!
  discount_fee: Float!
  payment_fee: Float!
}

"""The Closings model"""
type Closing {
  _id: ID!
  closingId: String!
  sales: [Sale!]!
  spentItems: [SpentItems!]!
  receivedItems: [ReceivedItems!]!
  inHandTotal: Float!
  spentTotal: Float!
  active: Boolean!
  date: DateTime!
  shop: Shop
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Commission {
  commissionable_value: Float!
  amount: Float!
  rate: Float!
}

input CreateClosingInput {
  salesIds: [ID!]
  spentItems: [SpentItemsInput!]
  receivedItems: [ReceivedItemsInput!]
  inHandTotal: Float
  spentTotal: Float
  active: Boolean!
  date: DateTime!
  shop: ID
}

input CreateItemsInput {
  name: String!
  category: String
  price: PriceInput
  stock: Float!
  shop: ID
}

input CreatePurchaseInput {
  items: [PurchaseItemInput!]!
  vendor: String
  contact: String
  email: String
  total: Float!
  discount: Float
  shop: ID
}

input CreateSaleInput {
  items: [SaleItemInput!]!
  customer: String
  contact: String
  email: String
  total: Float!
  discount: Float
  profit: Float!
  loss: Float!
  shop: ID
}

input CreateShopInput {
  name: String!
  type: ShopType!
  address: AddressInput!
  timezone: String
  branches: [BranchesInput!]
}

input CreateUserInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  roles: [Roles!]!
  shop: ID
}

type Customer {
  customer_id: String!
  profile: Profile!
  channel: Channel!
  payment: Payment!
}

input DateRange {
  from: DateTime!
  to: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Delivery {
  tip: Float!
  delivery_fee: Float!
  tax: Tax!
  location: Location
  provider: String!
}

type Item {
  id: String!
  name: String!
  customer_notes: String!
  options: [Option!]!
  quantity: Float!
}

"""The Items model"""
type Items {
  _id: ID!
  shortId: String!
  name: String!
  category: String
  price: Price
  stock: Float!
  shop: Shop
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Location {
  id: String!
  label: String!
  address_text: String!
  street: String!
  building: String!
  district: String!
  description: String!
  postal_code: String!
  city: String!
  latitude: Float!
  longitude: Float!
}

type Mutation {
  createClosing(closing: CreateClosingInput!): Closing
  updateClosing(closing: UpdateClosingInput!): Closing
  createItem(item: CreateItemsInput!): Items
  updateItem(item: UpdateItemsInput!): Items
  createPurchase(purchase: CreatePurchaseInput!): Purchase
  updatePurchase(purchase: UpdatePurchaseInput!): Purchase
  createSale(sale: CreateSaleInput!): Sale
  updateSale(sale: UpdateSaleInput!): Sale
  createShop(shop: CreateShopInput!): Shop
  createNewUser(user: CreateUserInput!): ID!
  sendResetPasswordEmail(email: String!): Boolean!
}

type Option {
  id: String!
  name: String!
  type: String!
  quantity: Float!
  customer_notes: String!
}

type OrderContent {
  order_id: String!
  brand_name: String!
  country_code: String!
  locale: String!
  global_entity_id: String!
  timestamp: String!
  promised_customer_timestamp: String!
  currency: String!
  business_type: String!
  vendor: VendorInfo!
  customer: Customer!
  commission: Commission!
  order: OrderInfo!
  delivery: Delivery!
  corporate: Boolean!
  preorder: Boolean!
  test_order: Boolean!
}

type OrderInfo {
  minimum_order_value: Float!
  deposit: Float!
  order_value: Float!
  tax: Tax!
  items: [Item!]!
}

type Payment {
  payment_method: String!
  paid: Boolean!
  transaction_number: String!
  total_order_value: Float!
  total_tax: Float!
  coupon: Float!
  discount: Float!
  minimum_order_value_fee: Float!
  wallet_balance: Float!
  loyalty_point_balance: Float!
  service_fee: Float!
}

type Price {
  sale: Float!
  cost: Float!
  list: Float!
}

input PriceInput {
  sale: Float!
  cost: Float!
  list: Float!
}

type Profile {
  id: String!
  guest: Boolean!
  locale: String!
  first_name: String!
  last_name: String!
  name: String!
  email: String!
  phone: String!
}

"""The Purchase model"""
type Purchase {
  _id: ID!
  billNumber: String!
  items: [PurchaseItem!]!
  vendor: String
  contact: String
  email: String
  total: Float!
  discount: Float
  active: Boolean!
  shop: Shop
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PurchaseItem {
  item: Items!
  quantity: Float!
  cost: Float!
  total: Float!
}

input PurchaseItemInput {
  item: ID!
  quantity: Float!
  cost: Float!
  total: Float!
}

type Query {
  getClosingForUser(date: DateRange!): [Closing!]!
  getClosingByClosingId(closingId: String!): [Closing!]!
  getItemsForUser: [Items!]!
  getPurchasesForUser(date: DateRange!): [Purchase!]!
  getPurchaseByBillNumber(billNumber: String!): [Purchase!]!
  getPurchaseByVendorName(vendor: String!): [Purchase!]!
  getPurchaseByVendorPhone(contact: String!): [Purchase!]!
  getSalesForUser(date: DateRange!): [Sale!]!
  getSaleByBillNumber(billNumber: String!): [Sale!]!
  getSaleByCustomerName(customer: String!): [Sale!]!
  getSaleByCustomerPhone(contact: String!): [Sale!]!
  getShopForUser: Shop
  me: User
  getUserById(id: ID!): User
}

type ReceivedItems {
  receivedFor: String!
  amount: Float!
}

input ReceivedItemsInput {
  receivedFor: String!
  amount: Float!
}

enum Roles {
  Sales
  Manager
  Admin
}

"""The Sales model"""
type Sale {
  _id: ID!
  billNumber: String!
  items: [SaleItem!]!
  customer: String
  contact: String
  email: String
  total: Float!
  discount: Float
  profit: Float!
  loss: Float!
  active: Boolean!
  shop: Shop
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SaleItem {
  item: Items!
  quantity: Float!
  cost: Float!
  discount: Float!
  total: Float!
}

input SaleItemInput {
  item: ID!
  quantity: Float!
  cost: Float!
  discount: Float!
  total: Float!
}

"""The Shop model"""
type Shop {
  _id: ID!
  name: String!
  type: ShopType!
  timezone: String
  address: Address
  branches: [Branches!]
}

enum ShopType {
  Mobile
}

type SpentItems {
  spentOn: String!
  amount: Float!
}

input SpentItemsInput {
  spentOn: String!
  amount: Float!
}

type Tax {
  tax_rate_percent: Float!
  net_amount: Float!
  amount: Float!
}

input UpdateClosingInput {
  salesIds: [ID!]
  spentItems: [SpentItemsInput!]
  receivedItems: [ReceivedItemsInput!]
  inHandTotal: Float
  spentTotal: Float
  active: Boolean!
  date: DateTime!
  shop: ID
  _id: ID!
}

input UpdateItemsInput {
  _id: ID!
  name: String!
  category: String
  price: PriceInput
  stock: Float!
}

input UpdatePurchaseInput {
  items: [PurchaseItemInput!]!
  vendor: String
  contact: String
  email: String
  total: Float!
  discount: Float
  shop: ID
  _id: ID!
}

input UpdateSaleInput {
  items: [SaleItemInput!]!
  customer: String
  contact: String
  email: String
  total: Float!
  discount: Float
  profit: Float!
  loss: Float!
  shop: ID
  _id: ID!
}

"""The User model"""
type User {
  _id: ID!
  firstName: String!
  lastName: String!
  fullName: String!
  roles: [Roles!]!
  role: Roles!
  shop: Shop
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VendorInfo {
  id: String!
  name: String!
  charges: Charges
}
